Exercise 1: Basic Searching and Filtering
1. Find the first movie that has the genre "Action":
action_movie = collection.find_one({"genres": "Action"})

2. Find all movies released after the year 2000 (Return the first 5 results):
movies_after_2000 = collection.find({"year": {"$gt": 2000}}).limit(5)

3. Find all movies where the IMDb rating is greater than 8.5 (Return the first 5 results):
high_rated_movies = collection.find({"imdb.rating": {"$gt": 8.5}}).limit(5)

4. Find all movies where the genre contains both "Action" and "Adventure":
action_adventure_movies = collection.find({"genres": {"$all": ["Action", "Adventure"]}}).limit(5)

Exercise 2: Sorting Results
1. Find all movies where the genre is "Comedy" and sort them by IMDb rating in descending order (Return the first 5 results):
sorted_comedy_movies = collection.find({"genres": "Comedy"}).sort("imdb.rating", -1).limit(5)

2. Find all movies where the genre is "Drama" and sort them by release year in ascending order (Return the first 5 results):
sorted_drama_movies = collection.find({"genres": "Drama"}).sort("year", 1).limit(5)

Exercise 3: Aggregation Pipeline
1. Write an aggregation pipeline that calculates the average IMDb rating for each genre (Return the top 5 genres):
avg_rating_by_genre = collection.aggregate([
{"$unwind": "$genres"},
{"$group": {"_id": "$genres", "avg_rating": {"$avg": "$imdb.rating"}}},
{"$sort": {"avg_rating": -1}},
{"$limit": 5}
])

2. Write an aggregation pipeline to find the top 5 directors by the average IMDb rating of their movies:
top_directors = collection.aggregate([
{"$group": {"_id": "$directors", "avg_rating": {"$avg": "$imdb.rating"}}},
{"$sort": {"avg_rating": -1}},
{"$limit": 5}
])

3. Write an aggregation pipeline to calculate the total number of movies released in each year (Sort the results by the year):
movies_per_year = collection.aggregate([
{"$group": {"_id": "$year", "total_movies": {"$sum": 1}}},
{"$sort": {"_id": 1}}
])

Exercise 4: Updating and Deleting Documents
1. Update the IMDb rating of a movie with the title "The Godfather" to 9.5:
collection.update_one({"title": "The Godfather"}, {"$set": {"imdb.rating": 9.5}})

2. Update all movies where the genre is "Horror" and set their IMDb rating to 6.0 if it is currently null:
collection.update_many({"genres": "Horror", "imdb.rating": {"$exists": False}}, {"$set": {"imdb.rating": 6.0}})

3. Delete all movies that were released before the year 1950:
collection.delete_many({"year": {"$lt": 1950}})

Exercise 5: Text Search
1. Create a text index on the title field and write a query to search for movies that contain the word "love" in their title:
collection.create_index([("title", "text")])
love_movies = collection.find({"$text": {"$search": "love"}})

2. Write a text search query to find movies where the word "war" appears in the title or plot, sorted by IMDb rating (Return only the top 5 results):
collection.create_index([("title", "text"), ("plot", "text")])
war_movies = collection.find({"$text": {"$search": "war"}}).sort("imdb.rating", -1).limit(5)

Exercise 6: Combining Multiple Queries (Bonus Exercise)
1. Find all movies where the genre is "Action" and the IMDb rating is greater than 8 (Sort the results by release year in descending order):
action_high_rated_movies = collection.find({"genres": "Action", "imdb.rating": {"$gt": 8}}).sort("year", -1)

2. Find all movies where the directors contain "Christopher Nolan" and the IMDb rating is greater than 8 (Return only the top 3 movies sorted by rating):
nolan_movies = collection.find({"directors": "Christopher Nolan", "imdb.rating": {"$gt": 8}}).sort("imdb.rating", -1).limit(3)


#I used Open Ai, stack overflow and class notes to complete this assignment 